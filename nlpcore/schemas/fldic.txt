# Schema for a `fldic` (FlorisBoard dictionary) file

`fldic` is the unified file format for FlorisBoard v0.4+ to store words, ngrams and shortcuts as dictionaries for all
NLP-related text-based functionality, such as predictive input and spell checking.

The file format is based on the Toml file format, however it is important to note that `fldic` files are in no way
compatible with regular Toml files and vice-versa!

This file describes the schema of a fldic (FlorisBoard dictionary) file in a human-readable way. In the current state
of the project there is no machine-readable version of this schema available, however this may change in the future.

## General info

The only supported and allowed character encoding of `fldic` files is UTF-8. Other encodings are either misinterpreted
or rejected, depending on if the encoding specifier was provided or not.

Lines starting with a hashtag symbol (`#`) are interpreted as line comments and are completely ignored, except
if it resembles a global specifier (see below).

## Structure/syntax

This subsection describes the general structure of a `fldic` file. The order of the sections is required to be the same
as stated in this schema, else the deserialization process will not work properly.

### 0. Global specifiers

Each `fldic` file MUST start with a special schema specifier line comment which has the link to the published schema,
else the file cannot be read properly. Additionally, the second line must indicate the encoding of the file, however
as of v0~draft1 only UTF-8 is supported and an allowed encoding value.

Example:

```
#~schema: https://schemas.florisboard.org/nlp/v0~draft1/fldic.txt
#~encoding: utf-8
```

### 1. List of words

The section `[words]` is in its essence a combination of a wordlist and TSV file format. Each line represents exactly
one word and is formatted in the following way:

```
<WORD><TAB><SCORE>
 or
<WORD><TAB><SCORE><TAB><FLAGS>
```

where
- `<WORD>` is a single non-empty word or term that exclusively contains printable characters (code >= 0x20)
- `<TAB>` is a literal TAB character (0x09)
- `<SCORE>` is a positive signed 64-bit integer representing the asbolute score of this word
- `<FLAGS>` is a string of optional flags:
  - `p`: indicates this word is potentially offensive
  - `h`: indicates this word is hidden by the user

Each word has an implicit index (also called "word id") assigned to it, where the first word starts with 1, the second
has 2 assigned, and so on and so forth. For words this is irrelevant, however if this dictionary contains ngrams these
are necessary for correct deserialization (see next section).

### 2. List of ngrams

The section `[ngrams]` represents all stored ngrams in this dictionary using its word ids. Each line represents exactly
one ngram of size >=2 and is formatted in the following way:

```
<NGRAM><TAB><SCORE>
 where <NGRAM> := <WORD_ID>,<WORD_ID>[..,<WORD_ID>]
```

where
- `<NGRAM>` is a comma-separated list of word ids (positive integers) or special ids (negative integers)
- `<WORD_ID>` is a positive signed 64-bit integer representing a word index from the word section. If it is a negative
  number it is considered to be a special id:
  - `-2`: Special id indicating "start of sentence"
- `<TAB>` is a literal TAB character (0x09)
- `<SCORE>` is a positive signed 64-bit integer representing the asbolute score of this ngram

### 3. List of shortcuts

The section `[shortcuts]` represents all stored shortcuts in this dictionary. Each line represents exactly one shortcut
and is formatted in the following way:

```
<SHORTCUT><TAB><SCHORTCUT_PHRASE>
```

where
- `<SHORTCUT>` is the shortcut in its abbreviated form
- `<TAB>` is a literal TAB character (0x09)
- `<SCHORTCUT_PHRASE>` is the shortcut in its full form
